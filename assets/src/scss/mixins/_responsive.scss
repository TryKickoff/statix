// ==========================================================================
//  Responsive media query mixins
//  * These are used so that we can define separate media-query content
//    for <IE9 and browsers with support for media queries
//  * These are directly related to the global $fix-mqs var defined in
//    kickoff-old-ie.scss
//  * kickoff-old-ie.scss ignores any content in media-queries with values less
//    than the $fix-mqs var value
// ==========================================================================
$fix-mqs: false !default; //assign false if no value set already

// $mq-base var:
//
// This is needed because browsers do not calculate em-based
// media queries correctly. It is set to 16 because we think
// the majority of users will have their browser set to 100%
// zoom level.
//
// See below for an explanation:
// http://www.filamentgroup.com/lab/how-we-learned-to-leave-body-font-size-alone.html

$mq-base: 16;


// ==========================================================================
//  Min-width media query:
//
//  * Equivalent to: @media screen and (min-width: 20em) { ... }
//  * Usage: @include respond-min(500) { ... };
//  * Argument is a pixel value WITHOUT a unit of measurement
//  ==========================================================================
@mixin respond-min($width) {
	$width-em: em(strip-units($width), $mq-base);

	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs >= $width {
			// ...output the content the user gave us.
			@content;
		}
	} @else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $width-em) {
			@content;
		}
	}
}


// ==========================================================================
//  Max-width media query:
//  * Equivalent to: @media screen and (max-width: 20em) { ... }
//  * Usage: @include respond-max(500) { ... };
//  * Argument is a pixel value WITHOUT a unit of measurement
// ==========================================================================
@mixin respond-max($width) {
	$width-em: em(strip-units($width), $mq-base);

	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs <= $width {
			// ...output the content the user gave us.
			@content;
		}
	} @else {
		// Otherwise, output it using a regular media query
		@media screen and (max-width: $width-em) {
			@content;
		}
	}
}


// ==========================================================================
//  Min-max-width media query:
//  * Equivalent to: @media screen and (min-width: 10em) and (max-width: 20em) { ... }
//  * Usage: @include respond-min-max(500, 600) { ... };
//  * Arguments are pixel values WITHOUT a unit of measurement
// ==========================================================================
@mixin respond-min-max($min-width, $max-width) {
	$min-width-em: em(strip-units($min-width), $mq-base);
	$max-width-em: em(strip-units($max-width), $mq-base);

	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs >= $min-width and $fix-mqs <= $max-width {
			// ...output the content the user gave us.
			@content;
		}
	} @else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $min-width-em) and (max-width: $max-width-em) {
			@content;
		}
	}
}


// ==========================================================================
// Old IE specific mixin
// * Only use this content if we're dealing with old IE
// * Usage: @include oldie() { ... }
// ==========================================================================
$old-ie: false !default;

@mixin old-ie {
	@if $old-ie {
		@content;
	}
}
